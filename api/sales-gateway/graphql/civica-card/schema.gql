type ReaderKey {
  readerKey: String;
}

type ReadCardSecondAuthToken {
  authToken: String;
}

type ReadCardApduCommands {
  apduCommands: [String]
}

type CardData {
  id: String
}

type CardReloadInfo {
  cardReloadSaleToken: CardReloadSaleToken
  writeApduCommands: [String],
  readApduCommands: [String],
  receipt: String
}

type CardReloadSaleToken {
  state: String,
  token: String
}

type ReadWriteCardData {
  readCardData: [String],
  writeCardData: [String]
}

type AbortCardReloadResp {
  isAborted: Boolean
}

type Conversation {
  id: String,
  operationState: String,
  initCardData: CardData,
  initCardState: String,
  reloadValue: Integer,
  receipt: String,
  business: String,
  terminal: String,
  endCardData: CardData,
  endCardState: String,
}

type Query {
  getReadCardSeconduthToken(conversationId: String, cardUid: String, challengeKey: String): ReadCardSecondAuthToken @requireAuth
  getReaderKey: ReaderKey @requireAuth
  getReadCardApduCommands(conversationId: String, cardAuthConfirmationToken: String): ReadCardApduCommands @requireAuth
  extractReadCardData(conversationId: String, apduResponses: [String]): CardData @requireAuth
  getCardReloadInfo(conversationId: String, cardAuthConfirmationToken: String, reloadValue: Integer): CardReloadInfo @requireAuth
  extractReadWriteCardData(conversationId: String, readApduResp: [String], writeApduResp: [String]): ReadWriteCardData @requireAuth
  getConversation(conversationId: String): Conversation @requireAuth

}

type Mutation {
  abortCardReload(conversationId: String): AbortCardReloadResp,
}
