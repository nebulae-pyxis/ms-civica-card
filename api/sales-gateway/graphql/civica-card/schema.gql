
type CivicaCardReloadConversation {
  id: String ,
  timestamp: BigInt,

  userJwt: String,
  userName: String,

  posId: String,
  posUser: String,
  posTerminal: String,
  posLocation: [Float],

  operationState: String,
  readerType: String,
  cardType: String
  # initCardData: CardData,
  # initCardState: String,
  # reloadValue: Int,
  # receipt: String,
  # business: String,
  # terminal: String,
  # endCardData: CardData,
  # endCardState: String,
}

# input ProcessCivicaCardReloadReadApduCommandResponesInput {
#   conversationId: String,
#   commands: [String]  
# }

type CivicaCardReloadSecondAuthToken {
  conversationId: String,
  token: String,  
}

type BinaryCommands {
  order: Int,
  cmd: String, 
  resp: String 
}

type CivicaCardData {
  cardNumber: Int,
  balance: Int
}

type Query{
  CivicaCardReloadConversation(id: ID!): CivicaCardReloadConversation @requireAuth
}

type Mutation {
  # abortCardReload(conversationId: String): AbortCardReloadResp,
  startCivicaCardReloadConversation(
    id: ID!,
    posId: String,
    posUser: String,
    posTerminal: String,
    posLocation: [Float],
    readerType: String,
    cardType: String): CivicaCardReloadConversation @requireAuth

  generateCivicaCardReloadSecondAuthToken(
    conversationId: String,
    cardUid: String,
    cardChallenge: String,
    cardRole: String
  ): CivicaCardReloadSecondAuthToken @requireAuth

  generateCivicaCardReloadReadApduCommands(
    conversationId: String,
    cardAuthConfirmationToken: String,
    dataType: String
  ): [BinaryCommands]  @requireAuth

  # processCivicaCardReloadReadApduCommandRespones(
  #   input: ProcessCivicaCardReloadReadApduCommandResponesInput  
  # ): CivicaCardData  @requireAuth



}
















# type ReaderKey {
#   readerKey: String
# }

# type ReadCardSecondAuthToken {
#   authToken: String
# }

# type ReadCardApduCommands {
#   apduCommands: [String]
# }

# type CardData {
#   id: String
# }

# type CardReloadInfo {
#   cardReloadSaleToken: CardReloadSaleToken
#   writeApduCommands: [String],
#   readApduCommands: [String],
#   receipt: String
# }

# type CardReloadSaleToken {
#   state: String,
#   token: String
# }

# type ReadWriteCardData {
#   readCardData: [String],
#   writeCardData: [String]
# }

# type AbortCardReloadResp {
#   isAborted: Boolean
# }



# type Query {
#   #getReadCardSeconduthToken(conversationId: String, cardUid: String, challengeKey: String): ReadCardSecondAuthToken @requireAuth
#   # getReaderKey: ReaderKey @requireAuth
#   # getReadCardApduCommands(conversationId: String, cardAuthConfirmationToken: String): ReadCardApduCommands @requireAuth
#   # extractReadCardData(conversationId: String, apduResponses: [String]): CardData @requireAuth
#   # getCardReloadInfo(conversationId: String, cardAuthConfirmationToken: String, reloadValue: Int): CardReloadInfo @requireAuth
#   # extractReadWriteCardData(conversationId: String, readApduResp: [String], writeApduResp: [String]): ReadWriteCardData @requireAuth
#   # getConversation(conversationId: String): Conversation @requireAuth

# }
