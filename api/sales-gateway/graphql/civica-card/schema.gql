
type CivicaCardReloadConversation {
  id: String ,
  timestamp: BigInt,

  userJwt: String,
  userName: String,

  posId: String,
  posUser: String,
  posTerminal: String,
  posLocation: [Float],
  readerType: String,
  cardType: String,
  cardUid: String,

  uiState: String,
  uiStateHistory: [String],

  purchase: CivicaCardReloadPurchase
}

type CivicaCardReloadSecondAuthToken {
  conversationId: String,
  token: String,  
}

input BinaryCommandInput {
  order: Int,
  cmd: String, 
  resp: String,
  cbc: String,
  rbc: String
}

type BinaryCommand {
  order: Int,
  cmd: String, 
  resp: String,
  cbc: String,
  rbc: String
}

type CivicaCardData {
  numeroTarjetaPublico: Int,
  identificacionEmpresa: Int,
  identificacionEmpleado: String,
  tipoNumeroDocumento: String,
  saldoTarjeta: BigInt,
  saldoTarjetaBk: BigInt,
  numeroTerminal: Int,
  formaPagoUsoTransporte: Int,
  fechaHoraTransaccion: Int,
  rutaUtilizada: Int,
  
  rutaAnterior: Int,
  valorPagoUsoTransporte: Int,
  secuenciaUsoTrayecto: Int,
  _saldoTarjeta: BigInt,
  _saldoCredito: BigInt,
  _saldoConsolidado: BigInt,
  numeroTarjetaDebito: Int,
  fechaUltimoDesbloqueoTarjeta: Int,
  fechaValidez: Int,
  fechaValidezVajeBeneficio: Int,
  perfilUsuario: Int,
  grupoPerfil: Int,
  numeroAcompannantes: Int,
  valorPagoSaldoCredito: BigInt,
  limiteUsoDiario: Int,
  codigoUltimaRecarga: Int,
  VersionMapping: Int,
  indicadorTarjetaBloqueada: Int,
  fechaHoraRecarga: Int,
  numeroSequenciaTransaccion: Int,
  pinStatus: Int,
  pinUsuario: Int,
  cantidadIntentosErroneos: Int,
  saldoCreditoBk: BigInt,
  saldoCredito: BigInt,
  saldoBeneficio: BigInt
}

type CivicaCardReloadPurchase {
  granted: Boolean,
  errorMsg: String,
  receipt: CivicaCardReloadPurchaseReceipt
}

type CivicaCardReloadPurchaseReceipt{
  id: String,
  timestamp: BigInt,

  reloadValue: BigInt,
  cardInitialValue: BigInt,
  cardFinalValue: BigInt,
  
  businesId: String,
  posId: String,
  posUserName: String,
  posUserId: String,
  posTerminal: String  
}

type ReaderKeyResponse{
  key: [Int]
}


type Query{
  CivicaCardReloadConversation(id: ID!): CivicaCardReloadConversation @requireAuth
  getMasterKeyReloader: ReaderKeyResponse  @requireAuth
}


type Mutation {
  # abortCardReload(conversationId: String): AbortCardReloadResp,
  startCivicaCardReloadConversation(
    id: ID!,
    posId: String!,
    posUserName: String!,
    posUserId: String!,
    posTerminal: String,
    posLocation: [Float]!,
    readerType: String!,
    cardType: String!,
    cardUid: String!): CivicaCardReloadConversation @requireAuth

  setCivicaCardReloadConversationUiState(
    conversationId: String,
    uiState: String
  ): String @requireAuth

  generateCivicaCardReloadSecondAuthToken(
    conversationId: String,
    cardChallenge: String,
    cardRole: String
  ): CivicaCardReloadSecondAuthToken @requireAuth

  generateCivicaCardReloadReadApduCommands(
    conversationId: String!,
    cardAuthConfirmationToken: String,
    dataType: String
  ): [BinaryCommand]  @requireAuth

  processCivicaCardReloadReadApduCommandRespones(
    conversationId: String!,
    commands: [BinaryCommandInput]!
  ): CivicaCardData  @requireAuth

  purchaseCivicaCardReload(
    conversationId: String!,
    value: Int!
  ): CivicaCardReloadPurchase  @requireAuth

  generateCivicaCardReloadWriteAndReadApduCommands(
    conversationId: String!,
    cardAuthConfirmationToken: String,
    dataType: String!
  ): [BinaryCommand]  @requireAuth


  processCivicaCardReloadWriteAndReadApduCommandResponses(
    conversationId: String,
    commands: [BinaryCommandInput]!
  ): CivicaCardData  @requireAuth

}